#[macro_use]
extern crate hex_literal;

mod asn;

use rsa::{BigUint, PaddingScheme, PublicKey, RSAPrivateKey, RSAPublicKey};

fn main() {
    let der_pvt = hex
    let der_pub = hex!("30818902818100C0822C2E70BE037A7FA1225974EDB053940CF7F8AF06F6AEEE37AE50803887B54AC5F5D5144368A13BD73CFE40C41E5742D344B2FCBF07DE4BDA781ABB8702FEF9BCD4941D59C7EBAAFF982B0A261ED6440CD96A5CD766AD4F0B60E2A328C8110EC6F19D243905AE10799CDF7A213BEBCDDE9206305FB8BA55EBAEE5DD09299D0203010001");
    println!("{:?}", get_private(&der_pvt));
    println!("{:?}", get_public(&der_pub));
}

fn get_private(data: &[u8]) -> Option<RSAPrivateKey> {
    if let Some(seq) = asn::split(&data) {
        if seq.len() == 9 {
            let n = BigUint::from_bytes_be(&seq[1]);
            let e = BigUint::from_bytes_be(&seq[2]);
            let d = BigUint::from_bytes_be(&seq[3]);
            let pq = vec![
                BigUint::from_bytes_be(seq[4]),
                BigUint::from_bytes_be(seq[5]),
            ];
            return Some(RSAPrivateKey::from_components(n, e, d, pq));
        }
    };
    return None;
}

fn get_public(data: &[u8]) -> Option<RSAPublicKey> {
    if let Some(seq) = asn::split(&data) {
        if seq.len() == 2 {
            let n = BigUint::from_bytes_be(&seq[0]);
            let e = BigUint::from_bytes_be(&seq[1]);
            if let Ok(key) = RSAPublicKey::new(n, e) {
                return Some(key);
            }
        }
    }
    return None;
}
